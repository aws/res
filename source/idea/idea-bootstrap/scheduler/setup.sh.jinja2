#!/bin/bash

#  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
#  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
#  with the License. A copy of the License is located at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
#  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
#  and limitations under the License.

set -x

if [[ -f /etc/os-release ]]; then
  OS_RELEASE_ID=$(grep -E '^(ID)=' /etc/os-release | awk -F'"' '{print $2}')
  OS_RELEASE_VERSION_ID=$(grep -E '^(VERSION_ID)=' /etc/os-release | awk -F'"' '{print $2}')
  BASE_OS=$(echo $OS_RELEASE_ID${OS_RELEASE_VERSION_ID%%.*})
elif [[ -f /usr/lib/os-release ]]; then
  OS_RELEASE_ID=$(grep -E '^(ID)=' /usr/lib/os-release | awk -F'"' '{print $2}')
  OS_RELEASE_VERSION_ID=$(grep -E '^(VERSION_ID)=' /usr/lib/os-release | awk -F'"' '{print $2}')
  BASE_OS=$(echo $OS_RELEASE_ID${OS_RELEASE_VERSION_ID%%.*})
else
  echo "Base OS information on Linux instance cannot be found."
  exit 1
fi

{% set PATH = '/bin:/usr/bin:/sbin:/usr/sbin:/usr/local/bin:/opt/pbs/bin:/opt/pbs/sbin:/opt/pbs/bin:/opt/idea/python/latest/bin' %}
echo -e "
## [BEGIN] IDEA Environment Configuration - Do Not Delete
AWS_DEFAULT_REGION={{ context.aws_region }}
AWS_REGION={{ context.aws_region }}
RES_BASE_OS=$BASE_OS
IDEA_MODULE_NAME={{ context.module_name }}
IDEA_MODULE_ID={{ context.module_id }}
IDEA_MODULE_SET={{ context.module_set }}
IDEA_MODULE_VERSION={{ context.module_version }}
IDEA_CLUSTER_S3_BUCKET={{ context.cluster_s3_bucket }}
IDEA_CLUSTER_NAME={{ context.cluster_name }}
IDEA_CLUSTER_HOME={{ context.cluster_home_dir }}
IDEA_APP_DEPLOY_DIR={{ context.app_deploy_dir }}
BOOTSTRAP_DIR=/root/bootstrap" > /etc/environment

{% if context.https_proxy != '' %}
echo -e "IDEA_HTTPS_PROXY={{ context.https_proxy }}
IDEA_NO_PROXY={{ context.no_proxy }}" >> /etc/environment
{% endif %}

echo -e "## [END] IDEA Environment Configuration

PATH={{ PATH }}
" >> /etc/environment

source /etc/environment

echo -n "no" > ${BOOTSTRAP_DIR}/reboot_required.txt

SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
source "${SCRIPT_DIR}/../common/bootstrap_common.sh"

{% include '_templates/linux/idea_proxy.jinja2' %}

{% include '_templates/linux/idea_service_account.jinja2' %}

# Begin: Install and Configure AWS Systems Manager Agent
/bin/bash "${SCRIPT_DIR}/../common/aws_ssm.sh" -o $RES_BASE_OS -r $AWS_REGION -n $IDEA_CLUSTER_NAME -s "${SCRIPT_DIR}"
configure_amazon_ssm_agent
# End: Install and Configure AWS Systems Manager Agent

# Begin: Install EPEL Repo
/bin/bash "${SCRIPT_DIR}/../common/epel_repo.sh" -o $RES_BASE_OS -s "${SCRIPT_DIR}"
# End: Install EPEL Repo

# Begin: Install System Packages
/bin/bash "${SCRIPT_DIR}/../common/system_packages.sh" -o $RES_BASE_OS -r $AWS_REGION -n $IDEA_CLUSTER_NAME -s "${SCRIPT_DIR}"
# End: Install System Packages

# Begin: Install/Configure CloudWatch Agent
/bin/bash "${SCRIPT_DIR}/../common/cloudwatch_agent.sh" -o $RES_BASE_OS -r $AWS_REGION -n $IDEA_CLUSTER_NAME -s "${SCRIPT_DIR}"

{%- set cloudwatch_agent_config = context.get_cloudwatch_agent_config(additional_log_files=additional_log_files) %}
{%- if cloudwatch_agent_config %}
echo '{{ context.utils.to_json(cloudwatch_agent_config, indent=True) }}' > /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json
/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -s -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json
{%- else %}
log_warning "cloudwatch_agent_config not provided."
{%- endif %}
# End: Install/Configure CloudWatch Agent

{%- include '_templates/linux/restrict_ssh.jinja2' %}

{%- if context.is_metrics_provider_prometheus() %}
  {%- include '_templates/linux/prometheus.jinja2' %}
  {%- include '_templates/linux/prometheus_node_exporter.jinja2' %}
{%- endif %}

# Begin: Install NFS Utils and dependency items
/bin/bash "${SCRIPT_DIR}/../common/nfs_utils.sh" -o $RES_BASE_OS -s "${SCRIPT_DIR}"
# End: Install NFS Utils and dependency items

# Begin: Install jq
/bin/bash "${SCRIPT_DIR}/../common/jq.sh" -o $RES_BASE_OS -s "${SCRIPT_DIR}"
# End: Install jq

{%- with  ebs_volume_tags = [
  {'Key':'res:EnvironmentName', 'Value': context.cluster_name },
  {'Key':'res:ModuleName', 'Value': context.module_name },
  {'Key':'res:ModuleId', 'Value': context.module_id },
  {'Key':'Name', 'Value': context.cluster_name + '/' + context.module_id + ' Root Volume' }
] %}
  {% include '_templates/linux/tag_ebs_volumes.jinja2' %}
{%- endwith %}

{%- with  network_interface_tags = [
  {'Key':'res:EnvironmentName', 'Value': context.cluster_name },
  {'Key':'res:ModuleName', 'Value': context.module_name },
  {'Key':'res:ModuleId', 'Value': context.module_id },
  {'Key':'Name', 'Value': context.cluster_name + '/' + context.module_id + ' Network Interface' }
] %}
  {% include '_templates/linux/tag_network_interface.jinja2' %}
{%- endwith %}

# Begin: Disable SE Linux
/bin/bash "${SCRIPT_DIR}/../common/disable_se_linux.sh" -o $RES_BASE_OS -s "${SCRIPT_DIR}"
# End: Disable SE Linux

{%- with alias_prefix = 'idea', install_dir = '/opt/idea/python' %}
  {% include '_templates/linux/python.jinja2' %}
{%- endwith %}

{% include '_templates/linux/chronyd.jinja2' %}

{% include '_templates/linux/disable_ulimit.jinja2' %}

{% include '_templates/linux/disable_strict_host_check.jinja2' %}

{% include '_templates/linux/disable_motd_update.jinja2' %}

{%- with secure_path = PATH %}
  {% include '_templates/linux/sudoer_secure_path.jinja2' %}
{%- endwith %}

{%- with messages = [
  context.module_name + ' (v'+context.module_version+'), Cluster: ' + context.cluster_name
] %}
  {% include '_templates/linux/motd.jinja2' %}
{%- endwith %}

{% include '_templates/linux/mount_shared_storage.jinja2' %}

{% include '_templates/linux/join_directoryservice.jinja2' %}

{% if context.config.get_string('scheduler.provider') == 'openpbs' %}
  {% include 'scheduler/_templates/configure_openpbs_server.jinja2' %}
{% endif %}

/bin/bash ${SCRIPT_DIR}/install_app.sh "{{context.vars.app_package_uri}}"

# upload scheduler logs to S3
mkdir -p ${IDEA_APP_DEPLOY_DIR}/logs
echo "@daily source /etc/environment; /bin/bash ${IDEA_APP_DEPLOY_DIR}/scheduler/resources/scripts/send_logs_s3.sh >> ${IDEA_APP_DEPLOY_DIR}/logs/send_logs_s3.log 2>&1" | crontab -

REBOOT_REQUIRED=$(cat /root/bootstrap/reboot_required.txt)
if [[ "${REBOOT_REQUIRED}" == "yes" ]]; then
  (crontab -l; echo "@reboot /bin/bash ${SCRIPT_DIR}/scheduler_post_reboot.sh crontab >> ${BOOTSTRAP_DIR}/logs/scheduler_post_reboot.log 2>&1") | crontab -
  reboot
else
  /bin/bash ${SCRIPT_DIR}/scheduler_post_reboot.sh >> ${BOOTSTRAP_DIR}/logs/scheduler_post_reboot.log 2>&1
fi
