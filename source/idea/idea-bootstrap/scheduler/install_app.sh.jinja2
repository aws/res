#!/bin/bash

#  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
#  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
#  with the License. A copy of the License is located at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
#  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
#  and limitations under the License.

set -x

source /etc/environment

APP_PACKAGE_DOWNLOAD_URI="${1}"
APP_NAME="scheduler"

AWS=$(command -v aws)
INSTANCE_REGION=${AWS_REGION}
S3_BUCKET=$(echo ${APP_PACKAGE_DOWNLOAD_URI} | cut -f3 -d/)

if [[ ${INSTANCE_REGION} =~ ^us-gov-[a-z]+-[0-9]+$ ]]; then
  S3_BUCKET_REGION=$(curl -s --head https://${S3_BUCKET}.s3.us-gov-west-1.amazonaws.com | grep bucket-region | awk '{print $2}' | tr -d '\r\n')
  $AWS s3 --region ${S3_BUCKET_REGION} cp "${APP_PACKAGE_DOWNLOAD_URI}" "${BOOTSTRAP_DIR}/"
else
  #S3_BUCKET_REGION=$(curl -s --head https://${S3_BUCKET}.s3.us-east-1.amazonaws.com | grep bucket-region | awk '{print $2}' | tr -d '\r\n')
  $AWS s3 --region ${INSTANCE_REGION} cp "${APP_PACKAGE_DOWNLOAD_URI}" "${BOOTSTRAP_DIR}/"
fi

PACKAGE_ARCHIVE=$(basename "${APP_PACKAGE_DOWNLOAD_URI}")
PACKAGE_NAME="${PACKAGE_ARCHIVE%.tar.gz*}"
PACKAGE_DIR="${BOOTSTRAP_DIR}/${PACKAGE_NAME}"
mkdir -p ${PACKAGE_DIR}
tar -xvf ${BOOTSTRAP_DIR}/${PACKAGE_ARCHIVE} -C ${PACKAGE_DIR}
idea_pip install -r ${PACKAGE_DIR}/requirements.txt
idea_pip install $(ls ${PACKAGE_DIR}/*-lib.tar.gz)
mkdir -p ${IDEA_APP_DEPLOY_DIR}/${APP_NAME}
mkdir -p ${IDEA_APP_DEPLOY_DIR}/logs
if [[ -d "${IDEA_APP_DEPLOY_DIR}/${APP_NAME}/resources" ]]; then
  rm -rf "${IDEA_APP_DEPLOY_DIR}/${APP_NAME}/resources"
fi
for directory in ${PACKAGE_DIR}/resources/bootstrap/*/ ; do
  candidate="$(basename $directory)"
  [ "$candidate" = "_templates" ] && continue
  [ "$candidate" = "common" ] && continue
  [ "$candidate" = "compute-node" ] && continue
  [ "$candidate" = "compute-node-ami-builder" ] && continue
  echo "rm -rf ${directory}"
done
cp -r ${PACKAGE_DIR}/resources ${IDEA_APP_DEPLOY_DIR}/${APP_NAME}

{% if context.config.get_string('scheduler.provider') == 'openpbs' %}
# configure openpbs hooks
/opt/pbs/bin/qmgr -c "create hook validate_job event='queuejob,modifyjob,movejob'"
/opt/pbs/bin/qmgr -c "import hook validate_job application/x-python default ${IDEA_APP_DEPLOY_DIR}/${APP_NAME}/resources/openpbs/hooks/openpbs_hook_handler.py"
/opt/pbs/bin/qmgr -c "create hook job_status event='runjob,execjob_begin,execjob_end'"
/opt/pbs/bin/qmgr -c "import hook job_status application/x-python default ${IDEA_APP_DEPLOY_DIR}/${APP_NAME}/resources/openpbs/hooks/openpbs_hook_handler.py"
{% endif %}

# since floating license resource checks will be performed by scheduler on compute nodes,
# the license check script is exported to scripts dir on internal shared storage
SCHEDULER_SCRIPTS_DIR="${IDEA_CLUSTER_HOME}/{{ context.module_id }}/scripts"
mkdir -p ${SCHEDULER_SCRIPTS_DIR}
if [[ ! -f "${SCHEDULER_SCRIPTS_DIR}/license_check.py" ]]; then
  cp ${IDEA_APP_DEPLOY_DIR}/${APP_NAME}/resources/scripts/license_check.py ${SCHEDULER_SCRIPTS_DIR}
fi

# compute node userdata customizations script
COMPUTE_NODE_DIR="${IDEA_CLUSTER_HOME}/{{ context.module_id }}/compute_node"
mkdir -p ${COMPUTE_NODE_DIR}
if [[ ! -f "${COMPUTE_NODE_DIR}/userdata_customizations.sh" ]]; then
  touch ${COMPUTE_NODE_DIR}/userdata_customizations.sh
fi

# compute node ami builder userdata customizations script
COMPUTE_NODE_AMI_BUILDER_DIR="${IDEA_CLUSTER_HOME}/{{ context.module_id }}/ami_builder"
mkdir -p ${COMPUTE_NODE_AMI_BUILDER_DIR}
if [[ ! -f "${COMPUTE_NODE_AMI_BUILDER_DIR}/userdata_customizations.sh" ]]; then
  touch ${COMPUTE_NODE_AMI_BUILDER_DIR}/userdata_customizations.sh
fi

{% include '_templates/linux/create_idea_app_certs.jinja2' %}

{% include '_templates/linux/supervisord.jinja2' %}

if [[ ! -z "${IDEA_HTTPS_PROXY}" ]]; then
  echo "[program:${APP_NAME}]
environment=
    https_proxy=\"%(ENV_IDEA_HTTPS_PROXY)s\",
    HTTPS_PROXY=\"%(ENV_IDEA_HTTPS_PROXY)s\",
    no_proxy=\"%(ENV_IDEA_NO_PROXY)s\",
    NO_PROXY=\"%(ENV_IDEA_NO_PROXY)s\"" > /etc/supervisord.d/${APP_NAME}.ini
else
  echo "[program:${APP_NAME}]" > /etc/supervisord.d/${APP_NAME}.ini
fi
echo "command=/opt/idea/python/latest/bin/resserver
process_name=${APP_NAME}
redirect_stderr=true
stdout_logfile = /opt/idea/app/logs/stdout.log
stdout_logfile_maxbytes=50MB
stdout_logfile_backups=10
startsecs=30
startretries=3
" >> /etc/supervisord.d/${APP_NAME}.ini

systemctl restart supervisord
