# Begin: OpenPBS Server Configuration

{% include '_templates/linux/openpbs.jinja2' %}

SCHEDULER_PRIVATE_IP=$(get_server_ip)
SCHEDULER_HOSTNAME=$(hostname)
SCHEDULER_HOSTNAME_ALT=$(hostname -s)

log_info "configure: /etc/hosts"
echo ${SCHEDULER_PRIVATE_IP} ${SCHEDULER_HOSTNAME} ${SCHEDULER_HOSTNAME_ALT} >> /etc/hosts

log_info "configure: /etc/pbs.conf"
if [[ -f "/etc/pbs.conf" ]]; then
  mv /etc/pbs.conf /etc/pbs.conf.$(date +%s)
fi
echo "PBS_SERVER=${SCHEDULER_HOSTNAME_ALT}
PBS_START_SERVER=1
PBS_START_SCHED=1
PBS_START_COMM=1
PBS_START_MOM=0
PBS_EXEC=/opt/pbs
PBS_HOME=/var/spool/pbs
PBS_CORE_LIMIT=unlimited
PBS_SCP=/usr/bin/scp
" > /etc/pbs.conf

log_info "configure: /var/spool/pbs/mom_priv/config"
if [[ -f /var/spool/pbs/mom_priv/config ]]; then
  mv /var/spool/pbs/mom_priv/config /var/spool/pbs/mom_priv/config.$(date +%s)
fi
echo "\$clienthost ${SCHEDULER_HOSTNAME_ALT}" > /var/spool/pbs/mom_priv/config

log_info "configure: /var/spool/pbs/server_priv/resourcedef"
if [[ -f /var/spool/pbs/server_priv/resourcedef ]]; then
  mv /var/spool/pbs/server_priv/resourcedef /var/spool/pbs/server_priv/resourcedef.$(date +%s)
fi
echo -e "
anonymous_metrics type=string
availability_zone type=string
availability_zone_id type=string
base_os type=string
compute_node type=string flag=h
efa_support type=string
error_message type=string
force_ri type=string
fsx_lustre type=string
fsx_lustre_deployment_type type=string
fsx_lustre_per_unit_throughput type=string
fsx_lustre_size type=string
ht_support type=string
instance_profile type=string
instance_ami type=string
instance_id type=string
instance_type type=string
instance_type_used type=string
keep_ebs type=string
placement_group type=string
root_size type=string
scratch_iops type=string
scratch_size type=string
security_groups type=string
spot_allocation_count type=string
spot_allocation_strategy type=string
spot_price type=string
stack_id type=string
subnet_id type=string
system_metrics type=string
queue_type type=string
job_id type=string
job_group type=string
job_uid type=string
provisioning_time type=string
dry_run type=string
cluster_name type=string
cluster_version type=string
scaling_mode type=string
lifecyle type=string
tenancy type=string
spot_fleet_request type=string
auto_scaling_group type=string
keep_forever type=string
terminate_when_idle type=string
launch_time type=string
capacity_added type=string
job_started_email_template type=string
job_completed_email_template type=string
" > /var/spool/pbs/server_priv/resourcedef

log_info "configure: /var/spool/pbs/sched_priv/sched_config"
# add compute_node to list of required resource if not already added.
grep -q "compute_node" /var/spool/pbs/sched_priv/sched_config
if [[ "$?" != "0" ]]; then
  sed -i 's/resources: "ncpus, mem, arch, host, vnode, aoe, eoe"/resources: "ncpus, mem, arch, host, vnode, aoe, eoe, compute_node"/g' /var/spool/pbs/sched_priv/sched_config
fi

log_info "configure: /var/spool/pbs/pbs_environment"
# setup openpbs environment variables
if [[ -f "/var/spool/pbs/pbs_environment" ]]; then
  mv /var/spool/pbs/pbs_environment /var/spool/pbs/pbs_environment.$(date +%s)
fi
echo "PATH=/bin:/usr/bin
IDEA_SCHEDULER_UNIX_SOCKET=/run/idea.sock
" > /var/spool/pbs/pbs_environment

log_info "configure: disable system account job submission"
# Disable job submission using system account
grep -q "alias qsub" "/home/{{ context.default_system_user }}/.bash_profile"
if [[ "$?" != "0" ]]; then
  echo "alias qsub='echo -e \" !!!! Do not submit job with system account. \n\n Please use LDAP account instead.\"'" >> /home/{{ context.default_system_user }}/.bash_profile
fi

log_info "enable and restart pbs"
systemctl enable pbs

systemctl restart pbs
MAX_RETRIES=5
RETRY_COUNT=0
while [[ $? -ne 0 ]] && [[ ${RETRY_COUNT} -lt ${MAX_RETRIES} ]]
do
  SLEEP_TIME=$(( RANDOM % 33 + 8 ))  # Sleep for 8-40 seconds
  log_info "(${RETRY_COUNT}/${MAX_RETRIES}) failed to start pbs, retrying in ${SLEEP_TIME} seconds ..."
  sleep ${SLEEP_TIME}
  ((RETRY_COUNT++))
  systemctl restart pbs
done

if [[ $? -ne 0 ]]; then
  log_error "failed to start pbs server. scheduler pbs configuration failed !!"
  exit 1
fi

log_info "configure: openpbs server"
/opt/pbs/bin/qmgr -c "set server flatuid = {{ context.config.get_string('scheduler.openpbs.server.flatuid', default='true') }}"
/opt/pbs/bin/qmgr -c "set server job_history_enable = {{ context.config.get_string('scheduler.openpbs.server.job_history_enable', default='1') }}"
/opt/pbs/bin/qmgr -c "set server job_history_duration = {{ context.config.get_string('scheduler.openpbs.server.job_history_duration', default='72:00:00') }}"
/opt/pbs/bin/qmgr -c "set server scheduler_iteration = {{ context.config.get_string('scheduler.openpbs.server.scheduler_iteration', default='30') }}"
/opt/pbs/bin/qmgr -c "set server max_concurrent_provision = {{ context.config.get_string('scheduler.openpbs.server.max_concurrent_provision', default='5000') }}"

log_info "configure: create openpbs default queue"
/opt/pbs/bin/qmgr -c "create queue normal"
/opt/pbs/bin/qmgr -c "set queue normal queue_type = Execution"
/opt/pbs/bin/qmgr -c "set queue normal started = True"
/opt/pbs/bin/qmgr -c "set queue normal enabled = True"
/opt/pbs/bin/qmgr -c "set server default_queue = normal"

# End: OpenPBS Server Configuration
