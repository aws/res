#!/bin/bash

set -x
# source environment. at this point, PATH should have been already updated
# and must contain soca python installation
source /etc/environment
source /root/bootstrap/infra.cfg

SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
source "${SCRIPT_DIR}/../common/bootstrap_common.sh"

# DCV Broker
DCV_GPG_KEY="{{ context.config.get_string('global-settings.package_config.dcv.gpg_key', required=True) }}"
DCV_SESSION_MANAGER_BROKER_NOARCH_VERSION="{{ context.config.get_string('global-settings.package_config.dcv.broker.linux.al2_rhel_centos7.version', required=True) }}"
DCV_SESSION_MANAGER_BROKER_URL="{{ context.config.get_string('global-settings.package_config.dcv.broker.linux.al2_rhel_centos7.url', required=True) }}"
DCV_SESSION_MANAGER_BROKER_SHA256_HASH="{{ context.config.get_string('global-settings.package_config.dcv.broker.linux.al2_rhel_centos7.sha256sum', required=True) }}"

timestamp=$(date +%s)
clean_hostname=$(hostname -s)
AWS_REGION={{ context.aws_region }}
CLIENT_TO_BROKER_PORT="{{ context.config.get_string('virtual-desktop-controller.dcv_broker.client_communication_port', required=True) }}"
AGENT_TO_BROKER_PORT="{{ context.config.get_string('virtual-desktop-controller.dcv_broker.agent_communication_port', required=True) }}"
GATEWAY_TO_BROKER_PORT="{{ context.config.get_string('virtual-desktop-controller.dcv_broker.gateway_communication_port', required=True) }}"
SESSION_TOKEN_DURATION="{{ context.config.get_string('virtual-desktop-controller.dcv_broker.session_token_validity', required=True) }}"
DYNAMODB_TABLE_RCU="{{ context.config.get_string('virtual-desktop-controller.dcv_broker.dynamodb_table.read_capacity.min_units', default=5) }}"
DYNAMODB_TABLE_WCU="{{ context.config.get_string('virtual-desktop-controller.dcv_broker.dynamodb_table.write_capacity.min_units', default=5) }}"

MODULE_ID="{{ context.module_id }}"
STAGING_AREA_RELATIVE_PATH='staging_area'

function restart_dcv_broker() {
  log_info "dcv session manager broker started"
  systemctl restart dcv-session-manager-broker
  log_info "dcv session manager broker complete"
}

function clean_staging_area() {
  rm -rf '${STAGING_AREA_RELATIVE_PATH}'
}

function setup_staging_area() {
  echo "setup staging area start"
  mkdir -p ${STAGING_AREA_RELATIVE_PATH}
  rm -rf '${STAGING_AREA_RELATIVE_PATH}/*'
  echo "setup staging area end"
}

function install_dcv_broker_package() {
  echo "dcv session manager broker package installation start."
  setup_staging_area


  which dcv-session-manager-broker
  if [[ "$?" != "0" ]]; then
    rpm --import ${DCV_GPG_KEY}
    pushd ${STAGING_AREA_RELATIVE_PATH}
    wget ${DCV_SESSION_MANAGER_BROKER_URL}
    if [[ $(sha256sum nice-dcv-session-manager-broker-${DCV_SESSION_MANAGER_BROKER_NOARCH_VERSION}.rpm | awk '{print $1}') != ${DCV_SESSION_MANAGER_BROKER_SHA256_HASH} ]];  then
      echo -e "FATAL ERROR: Checksum for DCV Broker failed. File may be compromised." > /etc/motd
      exit 1
    fi
    yum install -y nice-dcv-session-manager-broker-${DCV_SESSION_MANAGER_BROKER_NOARCH_VERSION}.rpm
    popd
  fi
  echo "dcv session manager broker package installation complete."
}

function configure_dcv_broker_properties() {
  echo "dcv session manager broker properties configuration started."

  if [[ -f /etc/dcv-session-manager-broker/session-manager-broker.properties ]]; then
    mv /etc/dcv-session-manager-broker/session-manager-broker.properties /etc/dcv-session-manager-broker/session-manager-broker.properties.${timestamp}
  fi

  echo -e "
# session-manager-working-path = /tmp
enable-authorization-server = false
enable-authorization = true
enable-agent-authorization = false

enable-persistence = true
persistence-db = dynamodb
dynamodb-region = ${AWS_REGION}
dynamodb-table-rcu = ${DYNAMODB_TABLE_RCU}
dynamodb-table-wcu = ${DYNAMODB_TABLE_WCU}
dynamodb-table-name-prefix = ${IDEA_CLUSTER_NAME}.${MODULE_ID}.dcv-broker.
# jdbc-connection-url = jdbc:mysql://database-mysql.rds.amazonaws.com:3306/database-mysql
# jdbc-user = admin
# jdbc-password = password
# enable-api-yaml = true

connect-session-token-duration-minutes = ${SESSION_TOKEN_DURATION}

# Dont want to see deleted session info for now.
delete-session-duration-hours = 0

# Dont want to see unreachable dcv servers for now. Setting fails for values less than 60
seconds-before-deleting-unreachable-dcv-server = 60

# create-sessions-number-of-retries-on-failure = 2
# autorun-file-arguments-max-size = 50
# autorun-file-arguments-max-argument-length = 150

client-to-broker-connector-https-port = ${CLIENT_TO_BROKER_PORT}
client-to-broker-connector-bind-host = 0.0.0.0
# client-to-broker-connector-key-store-file = test_security/KeyStore.jks
# client-to-broker-connector-key-store-pass = dcvsm1
agent-to-broker-connector-https-port = ${AGENT_TO_BROKER_PORT}
agent-to-broker-connector-bind-host = 0.0.0.0
# agent-to-broker-connector-key-store-file = test_security/KeyStore.jks
# agent-to-broker-connector-key-store-pass = dcvsm1

enable-gateway = true
gateway-to-broker-connector-https-port = ${GATEWAY_TO_BROKER_PORT}
gateway-to-broker-connector-bind-host = 0.0.0.0
# gateway-to-broker-connector-key-store-file = test_security/KeyStore.jks
# gateway-to-broker-connector-key-store-pass = dcvsm1
# enable-tls-client-auth-gateway = true
# gateway-to-broker-connector-trust-store-file = test_security/TrustStore.jks
# gateway-to-broker-connector-trust-store-pass = dcvsm1

# Broker To Broker
broker-to-broker-port = 47100
cli-to-broker-port = 47200
broker-to-broker-bind-host = 0.0.0.0
broker-to-broker-discovery-port = 47500
# broker-to-broker-discovery-addresses = 127.0.0.1:47500
# broker-to-broker-discovery-multicast-group = 127.0.0.1
# broker-to-broker-discovery-multicast-port = 47400
broker-to-broker-discovery-aws-region = ${AWS_REGION}
broker-to-broker-discovery-aws-alb-target-group-arn = ${BROKER_CLIENT_TARGET_GROUP_ARN}
broker-to-broker-distributed-memory-max-size-mb = 4096
# broker-to-broker-key-store-file = test_security/KeyStore.jks
# broker-to-broker-key-store-pass = dcvsm1
broker-to-broker-connection-login = dcvsm-user
broker-to-broker-connection-pass = dcvsm-pass

# Metrics
metrics-fleet-name-dimension = ${IDEA_CLUSTER_NAME}
enable-cloud-watch-metrics = true
# if cloud-watch-region is not provided, the region is taken from EC2 IMDS
# cloud-watch-region = ${AWS_REGION}
session-manager-working-path = /var/lib/dcvsmbroker

# GetSessionScreenshot API
session-screenshot-max-height = 600
session-screenshot-max-width = 800
" > /etc/dcv-session-manager-broker/session-manager-broker.properties

  chown root:dcvsmbroker /etc/dcv-session-manager-broker/session-manager-broker.properties
  chmod 640 /etc/dcv-session-manager-broker/session-manager-broker.properties

  systemctl enable dcv-session-manager-broker
  echo "dcv session manager broker properties configuration complete."

  if [[ ! -z ${IDEA_HTTPS_PROXY} ]]; then
    _HTTPS_PROXY=${IDEA_HTTPS_PROXY}
  elif [[ ! -z ${https_proxy} ]]; then
    _HTTPS_PROXY=${https_proxy}
  fi

  if [[ ! -z "${_HTTPS_PROXY}" ]]; then
      echo "Detected https_proxy.. starting java networking properties configuration updates"
      if [[ -f /etc/alternatives/jre/conf/net.properties ]]; then
          cp  /etc/alternatives/jre/conf/net.properties /etc/alternatives/jre/conf/net.properties.${timestamp}
      fi
      sed -i "s/http.nonProxyHosts=localhost|127.*|\[::1\]/http.nonProxyHosts=localhost|127.*|\[::1\]|169.254.169.254|dynamodb.${AWS_REGION}.amazonaws.com/" /etc/alternatives/jre/conf/net.properties
      PROXY_HOST=$(echo ${_HTTPS_PROXY} | awk '{split($0,a,"//"); print a[2]}' | awk '{split($0,a,":"); print a[1]}')
      PROXY_PORT=$(echo ${_HTTPS_PROXY} | awk '{split($0,a,":"); print a[3]}')
      sed -i "s/# https.proxyHost=/https.proxyHost=${PROXY_HOST}/" /etc/alternatives/jre/conf/net.properties
      sed -i "s/# https.proxyPort=443/https.proxyPort=${PROXY_PORT}/" /etc/alternatives/jre/conf/net.properties
      echo "java networking properties configuration completed"
  fi

  restart_dcv_broker
}

function configure_dcv_broker() {
  echo "Configure dcv broker started"
  provider_url="{{ context.config.get_string('identity-provider.cognito.provider_url', required=True) }}"
  dcv-session-manager-broker register-auth-server --url "${provider_url}/.well-known/jwks.json"
  echo "Configure dcv broker complete"
}

function verify_broker_installation() {
  local output=$(curl -k -s "https://localhost:${CLIENT_TO_BROKER_PORT}/sessionConnectionData/aSession/aOwner" | jq -r '.error')
  local count=0
  while [[ ! "$output" == "No authorization header" ]]
  do
    echo -ne "DCV Session Manager broker verification failed.. sleeping for 30 seconds; ${count} seconds already slept \033[0K\r"
    count=count+30
    sleep 30
    output=$(curl -k -s "https://localhost:${CLIENT_TO_BROKER_PORT}/sessionConnectionData/aSession/aOwner" | jq -r '.error')
  done
  echo "DCV Session Manager broker verification success"
}

function notify_controller() {
  MESSAGE="{\"event_group_id\":\"BROKER-USERDATA-COMPLETE\", \"event_type\":\"DCV_BROKER_USERDATA_EXECUTION_COMPLETE_EVENT\"}"
  AWS=$(command -v aws)
  $AWS sqs send-message --queue-url ${CONTROLLER_EVENTS_QUEUE_URL} --message-body "${MESSAGE}" --region ${AWS_REGION} --message-group-id "BROKER-USERDATA-COMPLETE"
}

install_dcv_broker_package
configure_dcv_broker_properties
verify_broker_installation
configure_dcv_broker
clean_staging_area
notify_controller
