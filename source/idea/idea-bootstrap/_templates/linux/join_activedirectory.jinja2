# Begin: Join ActiveDirectory

IDEA_CLUSTER_HOME_DIR="{{ context.config.get_string('shared-storage.home.mount_dir', required=True) }}"
AD_AUTHORIZATION_NONCE=${RANDOM}
AD_AUTHORIZATION_INSTANCE_ID=$(instance_id)
AD_AUTOMATION_SQS_QUEUE_URL="{{ context.config.get_string('directoryservice.ad_automation.sqs_queue_url', required=True) }}"
AD_AUTOMATION_DDB_TABLE_NAME="${IDEA_CLUSTER_NAME}.ad-automation"
RES_USER_TABLE="${IDEA_CLUSTER_NAME}.accounts.users"
AD_DOMAIN_NAME="{{ context.config.get_string('directoryservice.name', required=True) }}"
AD_REALM_NAME="{{ context.config.get_string('directoryservice.name', required=True).upper() }}"
AD_SUDOERS_GROUP_NAME="{{ context.config.get_string('directoryservice.sudoers.group_name', required=True) }}"
AD_SUDOERS_GROUP_NAME_ESCAPED="{{ context.config.get_string('directoryservice.sudoers.group_name', required=True).replace(' ', '\ ') }}"
SSSD_LDAP_ID_MAPPING="{{ context.config.get_bool('directoryservice.sssd.ldap_id_mapping', default=True) | lower }}"
AD_LDAP_BASE="{{context.config.get_string('directoryservice.ldap_base', required=True)}}"

AWS=$(command -v aws)
JQ=$(command -v jq)
REALM=$(command -v realm)


function ad_automation_sqs_send_message () {
  local PAYLOAD=$($JQ -nc \
                      --arg instance_id "${AD_AUTHORIZATION_INSTANCE_ID}" \
                      --arg nonce "${AD_AUTHORIZATION_NONCE}" \
                      '{
                         "header": {
                           "namespace": "ADAutomation.PresetComputer"
                         },
                         "payload": {
                           "nonce": $nonce,
                           "instance_id": $instance_id
                         }
                       }')

  $AWS sqs send-message \
    --queue-url "${AD_AUTOMATION_SQS_QUEUE_URL}" \
    --message-body "${PAYLOAD}" \
    --message-group-id ${AD_AUTHORIZATION_INSTANCE_ID} \
    --message-deduplication-id "ADAutomation.PresetComputer.${AD_AUTHORIZATION_INSTANCE_ID}.${AD_AUTHORIZATION_NONCE}" \
    --region ${AWS_REGION}

  return $?
}

function ad_automation_request_authorization () {
  local ATTEMPT_COUNT=0
  local MAX_ATTEMPTS=5
  ad_automation_sqs_send_message
  while [[ $? -ne 0 ]] && [[ ${ATTEMPT_COUNT} -le ${MAX_ATTEMPTS} ]]
  do
    local SLEEP_TIME=$(( RANDOM % 33 + 8 ))  # Minimum of 8 seconds sleep
    log_info "(${ATTEMPT_COUNT} of ${MAX_ATTEMPTS}) failed to request authorization to join AD, retrying in ${SLEEP_TIME} seconds ..."
    sleep ${SLEEP_TIME}
    ((ATTEMPT_COUNT++))
    ad_automation_sqs_send_message
  done
}

function ad_automation_get_authorization () {
  if [[ ! -f "/root/.convert_from_dynamodb_object.jq" ]]; then
    create_jq_ddb_filter
  fi
  local AUTOMATION_ENTRY_KEY=$($JQ -nc \
                              --arg instance_id "${AD_AUTHORIZATION_INSTANCE_ID}" \
                              --arg nonce "${AD_AUTHORIZATION_NONCE}" \
                              '{"instance_id": {"S": $instance_id}, "nonce": {"S": $nonce }}')

  $AWS dynamodb get-item \
       --table-name ${AD_AUTOMATION_DDB_TABLE_NAME} \
       --key ${AUTOMATION_ENTRY_KEY} \
       --region "${AWS_REGION}" | jq -f /root/.convert_from_dynamodb_object.jq | jq '.Item'
}

function ad_automation_wait_for_authorization_and_join () {
  local ATTEMPT_COUNT=0
  local MAX_ATTEMPTS=180 # wait for no more than 30 minutes ( as max SLEEP_TIME: 0 <= SLEEP_TIME <= 10 )

  local AD_AUTHORIZATION_ENTRY=$(ad_automation_get_authorization)
  while [[ -z "${AD_AUTHORIZATION_ENTRY}" ]] && [[ ${ATTEMPT_COUNT} -le ${MAX_ATTEMPTS} ]]
  do
    local SLEEP_TIME=$(( RANDOM % 33 + 8 ))  # 8-40sec of sleep time
    log_info "(${ATTEMPT_COUNT} of ${MAX_ATTEMPTS}) waiting for AD authorization, retrying in ${SLEEP_TIME} seconds ..."
    sleep ${SLEEP_TIME}
    ((ATTEMPT_COUNT++))
    AD_AUTHORIZATION_ENTRY=$(ad_automation_get_authorization)
  done

  local AUTHORIZATION_STATUS=$(echo "${AD_AUTHORIZATION_ENTRY}" | jq -r '.status')
  if [[ "${AUTHORIZATION_STATUS}" == 'success' ]]; then
    log_info "[Join AD] authorization successful. joining realm using OTP ..."
    local ONE_TIME_PASSWORD=$(echo "${AD_AUTHORIZATION_ENTRY}" | jq -r '.otp')
    # ensure we join to the domain controller where the computer account was created.
    local DOMAIN_CONTROLLER=$(echo "${AD_AUTHORIZATION_ENTRY}" | jq -r '.domain_controller')
    export IDEA_HOSTNAME=$(echo "${AD_AUTHORIZATION_ENTRY}" | jq -r '.hostname')
    local LOCAL_HOSTNAME=$(hostname -s)
    log_info "[Join AD] Using a local hostname of ${LOCAL_HOSTNAME^^}  / IDEA Hostname: ${IDEA_HOSTNAME^^} for AD Join operation"
    $REALM join \
    --one-time-password="${ONE_TIME_PASSWORD}" \
    --computer-name="${IDEA_HOSTNAME^^}" \
    --client-software=sssd \
    --server-software=active-directory \
    --membership-software=adcli \
    --verbose \
    ${DOMAIN_CONTROLLER}
  else
    local ERROR_CODE=$(echo "${AD_AUTHORIZATION_ENTRY}" | jq -r '.error_code')
    local ERROR_MESSAGE=$(echo "${AD_AUTHORIZATION_ENTRY}" | jq -r '.message')
    log_error "[Join AD] authorization failed: (${ERROR_CODE}) ${ERROR_MESSAGE}"
  fi
}

ad_automation_request_authorization
ad_automation_wait_for_authorization_and_join
# ad_automation_wait_for_authorization_and_join exports IDEA_HOSTNAME for our Kerberos info

grep -q "## Add the \"${AD_SUDOERS_GROUP_NAME}\"" /etc/sudoers
if [[ "$?" != "0" ]]; then
  echo -e "
## Add the \"${AD_SUDOERS_GROUP_NAME}\" group from the ${AD_DOMAIN_NAME} domain.
%${AD_SUDOERS_GROUP_NAME_ESCAPED} ALL=(ALL:ALL) ALL
">> /etc/sudoers
fi

function add_admins_to_sudoers () {
  if [[ ! -f "/root/.convert_from_dynamodb_object.jq" ]]; then
    create_jq_ddb_filter
  fi

  admins=$($AWS dynamodb query \
       --table-name ${RES_USER_TABLE} \
       --index-name role-index \
       --key-condition-expression "#R=:r1" --expression-attribute-names '{"#R":"role"}' \
       --expression-attribute-values '{":r1":{"S":"admin"}}' \
       --region "${AWS_REGION}" | jq -f /root/.convert_from_dynamodb_object.jq)

  for row in $(echo "${admins}" | jq -r '.Items[] | @base64'); do
    is_part_of_sudoer_group=$(echo $row | base64 --decode | jq --arg sudoers_group "$AD_SUDOERS_GROUP_NAME" \
    -r '.additional_groups | any(. == $sudoers_group)')
    if [ "$is_part_of_sudoer_group" = false ] ; then
        admin=$(echo $row | base64 --decode | jq -r '.username')
        echo "${admin} ALL=(ALL:ALL) ALL">> /etc/sudoers
    fi
  done
}

grep -q "## Add RES admins to sudoers" /etc/sudoers
if [[ "$?" != "0" ]]; then
  echo "## Add RES admins to sudoers" >> /etc/sudoers
  add_admins_to_sudoers
fi

if [[ -f /etc/sssd/sssd.conf ]]; then
  cp /etc/sssd/sssd.conf /etc/sssd/sssd.conf.orig
fi

if [[ ${IDEA_MODULE_NAME} == "cluster-manager" ]]; then
  enumerate_value=True
else
  enumerate_value=False
fi

echo -e "[sssd]
domains = ${AD_DOMAIN_NAME}
config_file_version = 2
services = nss, pam

[domain/${AD_DOMAIN_NAME}]
ad_domain = ${AD_DOMAIN_NAME}
# When SSSD is configured to use AD provider, back end communication occurs over a GSSAPI-encrypted channel,
# SSL/TLS options should not be used in this case and will be superseded by Kerberos usage. Note that the latest
# version of SSSD (>=2.3.0) allows to force the LDAPS connection, but the package is not available in the Amazon Linux Core x86_64 repo.
# Only uncomment the lines below to force the LDAPS connection with the latest SSSD version if required:
# ad_use_ldaps = true

krb5_realm = ${AD_REALM_NAME}
realmd_tags = manages-system joined-with-adcli
cache_credentials = true
id_provider = ad
access_provider = ad
auth_provider = ad
chpass_provider = ad
krb5_store_password_if_offline = true
default_shell = /bin/bash

# posix uidNumber and gidNumber will be ignored when ldap_id_mapping = true
ldap_id_mapping = ${SSSD_LDAP_ID_MAPPING}

use_fully_qualified_names = false
fallback_homedir = ${IDEA_CLUSTER_HOME_DIR}/%u

# disable or set to false for very large environments
enumerate = "${enumerate_value}"

sudo_provider = none

# Use our AD-created IDEA hostname
ldap_sasl_authid = ${IDEA_HOSTNAME}\$

[nss]
homedir_substring = ${IDEA_CLUSTER_HOME_DIR}/

[pam]

[autofs]

[ssh]

[secrets]
" > /etc/sssd/sssd.conf

chmod 600 /etc/sssd/sssd.conf

systemctl enable sssd
systemctl restart sssd

# note: sss is removed for nsswitch to compared to openldap, to avoid mail spams.
grep -q "sudoers: files" /etc/nsswitch.conf
if [[ "$?" != "0" ]]; then
  echo "sudoers: files" >> /etc/nsswitch.conf
fi

# End: Join ActiveDirectory


