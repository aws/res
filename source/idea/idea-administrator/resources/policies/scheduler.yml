Version: '2012-10-17'
Statement:
  - Action:
      - pricing:GetProducts
      - budgets:ViewBudget
      - ec2:DescribeInstances
      - ec2:DescribeSubnets
      - ec2:DescribeSecurityGroups
      - ec2:DescribeImages
      - ec2:DescribeInstanceAttribute
      - ec2:DescribeInstanceTypes
      - ec2:DescribeInstanceStatus
      - ec2:DescribeReservedInstances
      - ec2:DescribeSpotInstanceRequests
      - ec2:DescribeVpcClassicLink
      - ec2:DescribeVolumes
      - ec2:DescribePlacementGroups
      - ec2:DescribeKeyPairs
      - ec2:DescribeLaunchTemplates
      - ec2:DescribeLaunchTemplateVersions
      - ec2:DescribeNetworkInterfaces
      - ec2:DescribeSpotFleetRequests
      - ec2:DescribeSpotFleetInstances
      - ec2:DescribeSpotFleetRequestHistory
      - ec2:DescribeTags
      - fsx:DescribeFileSystems
      - iam:GetInstanceProfile
      - autoscaling:DescribeAutoScalingGroups
      - autoscaling:DescribeScalingActivities
      - autoscaling:DescribeLaunchConfigurations
      - elasticloadbalancing:DescribeRules
      - elasticloadbalancing:DescribeListeners
      - elasticloadbalancing:DescribeTargetGroups
      - savingsplans:DescribeSavingsPlans
      - servicequotas:ListServiceQuotas
      - ssm:ListDocuments
      - ssm:ListDocumentVersions
      - ssm:DescribeDocument
      - ssm:GetDocument
      - ssm:DescribeInstanceInformation
      - ssm:DescribeDocumentParameters
      - ssm:DescribeInstanceProperties
      - ssm:ListCommands
      - ssm:GetCommandInvocation
      - ssm:DescribeAutomationExecutions
    Resource: '*'
    Effect: Allow

  - Condition:
      StringLikeIfExists:
        autoscaling:LaunchConfigurationName: '{{ context.cluster_name }}*'
    Action:
      - autoscaling:UpdateAutoScalingGroup
      - autoscaling:DeleteAutoScalingGroup
      - autoscaling:CreateAutoScalingGroup
      - autoscaling:DetachInstances
      - ec2:DeleteLaunchTemplate
      - ec2:CreateLaunchTemplate
      - fsx:CreateDataRepositoryTask
    Resource: '*'
    Effect: Allow

  - Action:
      - ec2:CreateTags
    Resource:
      - '{{ context.arns.get_arn("ec2", "volume/*", aws_region="*") }}'
      - '{{ context.arns.get_arn("ec2", "network-interface/*", aws_region="*") }}'
      - '{{ context.arns.get_arn("ec2", "instance/*", aws_region="*") }}'
      - '{{ context.arns.get_arn("ec2", "spot-instances-request/*", aws_region="*") }}'
    Effect: Allow

  - Action:
      - cloudformation:CreateStack
      - cloudformation:DeleteStack
      - cloudformation:DescribeStackResources
      - cloudformation:DescribeStacks
      - cloudformation:GetTemplate
    Resource: '*'
    Effect: Allow

  - Condition:
      ForAllValues:ArnEqualsIfExists:
        ec2:Vpc: '{{ context.arns.vpc_arn }}'
    Action:
      - ec2:RunInstances
      - ec2:StopInstances
      - ec2:StartInstances
      - ec2:TerminateInstances
      - ec2:CreatePlacementGroup
      - ec2:DeletePlacementGroup
      - ec2:ModifyInstanceAttribute
    Resource:
      {{ context.utils.to_yaml(context.arns.ec2_common_arns) | indent(6) }}
    Effect: Allow

  - Action:
      - ssm:SendCommand
    Resource:
      - '{{ context.arns.get_arn("ec2", "instance/*") }}'
      - '{{ context.arns.get_arn("ssm", "document/AWS-RunPowerShellScript", aws_account_id="") }}'
      - '{{ context.arns.get_arn("ssm", "document/AWS-RunShellScript", aws_account_id="") }}'
    Effect: Allow

  - Action:
      - ssm:StartAutomationExecution
    Resource:
      - '{{ context.arns.get_ssm_arn("automation-definition/") }}'
    Effect: Allow

  - Action:
      - ssm:StopAutomationExecution
      - ssm:GetAutomationExecution
    Resource:
      - '{{ context.arns.get_ssm_arn("automation-execution/") }}'
    Effect: Allow

  - Action:
      - lambda:InvokeFunction
    Resource:
      - '{{ context.arns.get_lambda_arn() }}'
    Effect: Allow

  - Action:
      - fsx:CreateFileSystem
      - fsx:TagResource
    Resource:
      - '{{ context.arns.get_arn("fsx", "file-system/*") }}'
    Effect: Allow

  - Condition:
      StringLike:
        aws:ResourceTag/res:EnvironmentName: '{{ context.cluster_name }}'
    Action:
      - fsx:DeleteFileSystem
    Resource:
      - '{{ context.arns.get_arn("fsx", "file-system/*") }}'
    Effect: Allow

  - Action:
      - iam:CreateServiceLinkedRole
      - iam:AttachRolePolicy
      - iam:PutRolePolicy
    Resource:
      {{ context.utils.to_yaml(context.arns.service_role_arns) | indent(6) }}
    Effect: Allow

  - Condition:
      ForAllValues:ArnEqualsIfExists:
        ec2:Vpc: '{{ context.arns.vpc_arn }}'
    Action:
      - ec2:CreatePlacementGroup
      - ec2:DeletePlacementGroup
      - ec2:RequestSpotFleet
      - ec2:ModifySpotFleetRequest
      - ec2:CancelSpotFleetRequests
    Resource: '*'
    Effect: Allow

  - Action:
      - s3:GetObject
      - s3:ListBucket
      - s3:PutObject
      - s3:GetBucketAcl
    Resource:
      {{ context.utils.to_yaml(context.arns.s3_bucket_arns) | indent(6) }}
    Effect: Allow

  - Action:
      - dynamodb:GetItem
      - dynamodb:Query
      - dynamodb:Scan
      - dynamodb:DescribeTable
      - dynamodb:DescribeStream
      - dynamodb:GetRecords
      - dynamodb:GetShardIterator
      - dynamodb:ListStreams
    Resource:
      {{ context.utils.to_yaml(context.arns.cluster_config_ddb_arn) | indent(6) }}
    Effect: Allow

  - Action:
      - dynamodb:TagResource
      - dynamodb:BatchGet*
      - dynamodb:DescribeStream
      - dynamodb:DescribeTable
      - dynamodb:Get*
      - dynamodb:Query
      - dynamodb:Scan
      - dynamodb:BatchWrite*
      - dynamodb:CreateTable
      - dynamodb:Delete*
      - dynamodb:Update*
      - dynamodb:PutItem
    Resource:
      - '{{ context.arns.get_ddb_table_arn(context.module_id + ".queue-profiles") }}'
      - '{{ context.arns.get_ddb_table_arn(context.module_id + ".applications") }}'
      - '{{ context.arns.get_ddb_table_arn(context.module_id + ".license-resources") }}'
    Effect: Allow

  - Condition:
      ForAllValues:ArnEqualsIfExists:
        ec2:Vpc: '{{ context.arns.vpc_arn }}'
    Action:
      - iam:PassRole
      - iam:CreateServiceLinkedRole
    Resource:
      - '{{ context.vars.compute_node_role_arn }}'
      - '{{ context.vars.spot_fleet_request_role_arn }}'
    Effect: Allow

  - Action:
      - cloudwatch:PutMetricData
    Resource: '*'
    Effect: Allow
    Condition:
      StringLike:
        cloudwatch:namespace: IDEA/*
  - Action:
      - iam:SimulatePrincipalPolicy
    Resource:
      - '{{ context.vars.scheduler_role_arn }}'
    Effect: Allow

  - Action:
      - secretsmanager:GetSecretValue
    Condition:
      StringEquals:
        secretsmanager:ResourceTag/res:EnvironmentName: '{{ context.cluster_name }}'
        secretsmanager:ResourceTag/res:ModuleName: scheduler
    Resource: '*'
    Effect: Allow

  - Action:
      - sqs:*
    Resource:
      - '{{ context.arns.get_sqs_arn(context.module_id + "-job-status-events") }}'
    Effect: Allow
    Sid: JobStatusEventsQueue

  - Action:
      - sqs:SendMessage
    Resource:
      - '{{ context.arns.get_sqs_arn(context.config.get_module_id("cluster-manager") + "-notifications.fifo") }}'
    Effect: Allow
    Sid: SendUserNotifications

  - Action:
      - logs:PutRetentionPolicy
    Resource: '*'
    Effect: Allow

  - Action:
      - kinesis:PutRecord
      - kinesis:PutRecords
    Resource:
      - '{{ context.arns.get_kinesis_arn() }}'
    Effect: Allow

  - Effect: Allow
    Action:
      - ec2:CreateSnapshot
      - ec2:CreateImage
    Resource:
      - '*'
    Sid: ComputeNodeAmiBuilderPermissions1

  - Effect: Allow
    Action:
      - ec2:CreateTags
    Condition:
      StringEquals:
        ec2:CreateAction:
          - CreateImage
    Resource:
      - '*'
    Sid: ComputeNodeAmiBuilderPermissions2

{% include '_templates/aws-managed-ad.yml' %}

{% include '_templates/openldap.yml' %}

{% include '_templates/activedirectory.yml' %}

{% include '_templates/custom-kms-key.yml' %}
