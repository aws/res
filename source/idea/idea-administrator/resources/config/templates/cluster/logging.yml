# logging configuration for IDEA supported application servers

logging:

  # these are python supported log formatters. you can customize these as per your needs
  # customize these and change the profile as per your needs
  formatters:
    default:
      format: "[%(asctime)s] [%(levelname)s] [%(name)s] %(message)s"

  # these are python supported log handlers.
  handlers:

    console:
      class: logging.handlers.StreamHandler

    file:

      # see: https://docs.python.org/3/library/logging.handlers.html#timedrotatingfilehandler for more details.
      # TimedRotatingFileHandler documentation is copied/sourced from above link for easy reference.
      # Attributes: atTime, delay and errors are not supported at the moment.

      class: logging.handlers.TimedRotatingFileHandler

      # Rotating happens based on the product of "when" and "interval"
      interval: 1

      # You can use the when to specify the type of interval.
      # The list of possible values is below:
      #   > S - Seconds
      #   > M - Minutes
      #   > H - Hours
      #   > D - Days
      #   > W0-W6 - Weekday (0=Monday)
      #   > midnight - Roll over at midnight.
      when: midnight

      # If backupCount is nonzero, at most backupCount files will be kept, and if more would be created
      # when rollover occurs, the oldest one is deleted. The deletion logic uses the interval to determine
      # which files to delete, so changing the interval may leave old files lying around.
      backupCount: 15


  # logging profiles enables managing presets for logging configurations
  profiles:

    # * console profile:
    #   > use this profile during development or for cli apps. DEBUG logs are enabled and all logs are routed
    #     to console/stdout only
    #   > this profile should NOT be used in production application server deployments
    console:
      formatter: default
      loggers:
        app:
          level: DEBUG
          handlers:
            - console
        root:
          level: WARNING
          handlers:
            - console

    # * production profile:
    #   > use this profile for production environments
    #   > INFO and file based logging is enabled for this profile
    production:
      formatter: default
      loggers:
        app:
          level: INFO
          handlers:
            - file
        root:
          level: WARNING
          handlers:
            - file

    # * production profile:
    #   > use this profile for to enable DEBUG logging on production environments
    #   > limit usage of this profile in production environments and change the profile back to production once the issue is resolved.
    #   > DEBUG and file based logging is enabled for this profile
    debug:
      formatter: default
      loggers:
        app:
          level: DEBUG
          handlers:
            - file
        root:
          level: WARNING
          handlers:
            - file

  # Audit log settings for IDEA application servers
  # API invocation request/response logs include:
  #  Who (Actor), What (API Namespace) and When (Timestamp) and Why (Authorization Type)
  # log entries are of the below format:
  # API Request:
  #   <formatter> (req) [actor:<Username>|auth_type:<AuthorizationType>|request_id:<RequestId>|client_id:<ClientId>] [API Namespace | JSON Payload]
  # API Response:
  #   <formatter> (req) [actor:<Username>|auth_type:<AuthorizationType>|request_id:<RequestId>|client_id:<ClientId>] [API Namespace | JSON Payload] (<total_time> ms) [OK|<ERROR_CODE>]
  # auditing tags below can be enabled to log additional information.
  # Developer Note:
  # * audit logging framework does not cover the target entity. eg. User, Job, Session etc.
  # * The underlying API implementation can/should log specifics about the target entity in the API
  #   using the logging methods in ApiInvocationContext to preserve and log with auditing context/tags
  audit_logs:
    # indicate if the request / response json payload should be logged instead of just the API Namespace.
    # enabling this setting to true will significantly increase the amount of logs generated (and ingested into CloudWatch logs if enabled/or applicable)
    # if the cluster has significantly high traffic, consider evaluating the EBS Volume size and log rotation settings to avoid disk utilization, performance degradation problems
    enable_payload_tracing: false

    # enable/disable additional tags in audit log context.
    # enabling client_id, request_id may impact log verbosity and cloudwatch log ingestion volume
    tags:
      - actor
      - auth_type
      # - client_id
      # - request_id
