# coding: utf-8

"""
    DCV Session Manager

    DCV Session Manager API  # noqa: E501

    OpenAPI spec version: 2021.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class CpuLoadAverage(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'one_minute': 'float',
        'five_minutes': 'float',
        'fifteen_minutes': 'float'
    }

    attribute_map = {
        'one_minute': 'OneMinute',
        'five_minutes': 'FiveMinutes',
        'fifteen_minutes': 'FifteenMinutes'
    }

    def __init__(self, one_minute=None, five_minutes=None, fifteen_minutes=None):  # noqa: E501
        """CpuLoadAverage - a model defined in Swagger"""  # noqa: E501
        self._one_minute = None
        self._five_minutes = None
        self._fifteen_minutes = None
        self.discriminator = None
        if one_minute is not None:
            self.one_minute = one_minute
        if five_minutes is not None:
            self.five_minutes = five_minutes
        if fifteen_minutes is not None:
            self.fifteen_minutes = fifteen_minutes

    @property
    def one_minute(self):
        """Gets the one_minute of this CpuLoadAverage.  # noqa: E501

        The average load in the last minute of the cpu  # noqa: E501

        :return: The one_minute of this CpuLoadAverage.  # noqa: E501
        :rtype: float
        """
        return self._one_minute

    @one_minute.setter
    def one_minute(self, one_minute):
        """Sets the one_minute of this CpuLoadAverage.

        The average load in the last minute of the cpu  # noqa: E501

        :param one_minute: The one_minute of this CpuLoadAverage.  # noqa: E501
        :type: float
        """

        self._one_minute = one_minute

    @property
    def five_minutes(self):
        """Gets the five_minutes of this CpuLoadAverage.  # noqa: E501

        The average load in the last 5 minutes of the cpu  # noqa: E501

        :return: The five_minutes of this CpuLoadAverage.  # noqa: E501
        :rtype: float
        """
        return self._five_minutes

    @five_minutes.setter
    def five_minutes(self, five_minutes):
        """Sets the five_minutes of this CpuLoadAverage.

        The average load in the last 5 minutes of the cpu  # noqa: E501

        :param five_minutes: The five_minutes of this CpuLoadAverage.  # noqa: E501
        :type: float
        """

        self._five_minutes = five_minutes

    @property
    def fifteen_minutes(self):
        """Gets the fifteen_minutes of this CpuLoadAverage.  # noqa: E501

        The average load in the last 15 minutes of the cpu  # noqa: E501

        :return: The fifteen_minutes of this CpuLoadAverage.  # noqa: E501
        :rtype: float
        """
        return self._fifteen_minutes

    @fifteen_minutes.setter
    def fifteen_minutes(self, fifteen_minutes):
        """Sets the fifteen_minutes of this CpuLoadAverage.

        The average load in the last 15 minutes of the cpu  # noqa: E501

        :param fifteen_minutes: The fifteen_minutes of this CpuLoadAverage.  # noqa: E501
        :type: float
        """

        self._fifteen_minutes = fifteen_minutes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CpuLoadAverage, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CpuLoadAverage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
