# coding: utf-8

"""
    DCV Session Manager

    DCV Session Manager API  # noqa: E501

    OpenAPI spec version: 2021.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Os(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'family': 'str',
        'name': 'str',
        'version': 'str',
        'kernel_version': 'str',
        'build_number': 'str'
    }

    attribute_map = {
        'family': 'Family',
        'name': 'Name',
        'version': 'Version',
        'kernel_version': 'KernelVersion',
        'build_number': 'BuildNumber'
    }

    def __init__(self, family=None, name=None, version=None, kernel_version=None, build_number=None):  # noqa: E501
        """Os - a model defined in Swagger"""  # noqa: E501
        self._family = None
        self._name = None
        self._version = None
        self._kernel_version = None
        self._build_number = None
        self.discriminator = None
        if family is not None:
            self.family = family
        if name is not None:
            self.name = name
        if version is not None:
            self.version = version
        if kernel_version is not None:
            self.kernel_version = kernel_version
        if build_number is not None:
            self.build_number = build_number

    @property
    def family(self):
        """Gets the family of this Os.  # noqa: E501

        The OS family  # noqa: E501

        :return: The family of this Os.  # noqa: E501
        :rtype: str
        """
        return self._family

    @family.setter
    def family(self, family):
        """Sets the family of this Os.

        The OS family  # noqa: E501

        :param family: The family of this Os.  # noqa: E501
        :type: str
        """

        self._family = family

    @property
    def name(self):
        """Gets the name of this Os.  # noqa: E501

        The name of the OS  # noqa: E501

        :return: The name of this Os.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Os.

        The name of the OS  # noqa: E501

        :param name: The name of this Os.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def version(self):
        """Gets the version of this Os.  # noqa: E501

        The version of the OS  # noqa: E501

        :return: The version of this Os.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Os.

        The version of the OS  # noqa: E501

        :param version: The version of this Os.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def kernel_version(self):
        """Gets the kernel_version of this Os.  # noqa: E501

        The version of the Kernel  # noqa: E501

        :return: The kernel_version of this Os.  # noqa: E501
        :rtype: str
        """
        return self._kernel_version

    @kernel_version.setter
    def kernel_version(self, kernel_version):
        """Sets the kernel_version of this Os.

        The version of the Kernel  # noqa: E501

        :param kernel_version: The kernel_version of this Os.  # noqa: E501
        :type: str
        """

        self._kernel_version = kernel_version

    @property
    def build_number(self):
        """Gets the build_number of this Os.  # noqa: E501

        The OS build number  # noqa: E501

        :return: The build_number of this Os.  # noqa: E501
        :rtype: str
        """
        return self._build_number

    @build_number.setter
    def build_number(self, build_number):
        """Sets the build_number of this Os.

        The OS build number  # noqa: E501

        :param build_number: The build_number of this Os.  # noqa: E501
        :type: str
        """

        self._build_number = build_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Os, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Os):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
