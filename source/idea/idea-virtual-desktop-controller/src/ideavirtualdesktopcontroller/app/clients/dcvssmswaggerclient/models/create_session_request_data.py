# coding: utf-8

"""
    DCV Session Manager

    DCV Session Manager API  # noqa: E501

    OpenAPI spec version: 2021.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class CreateSessionRequestData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'owner': 'str',
        'type': 'str',
        'dcv_gl_enabled': 'bool',
        'max_concurrent_clients': 'int',
        'init_file_path': 'str',
        'init_file': 'str',
        'autorun_file': 'str',
        'autorun_file_arguments': 'list[str]',
        'permissions_file': 'str',
        'requirements': 'str',
        'enqueue_request': 'bool',
        'disable_retry_on_failure': 'bool',
        'storage_root': 'str'
    }

    attribute_map = {
        'name': 'Name',
        'owner': 'Owner',
        'type': 'Type',
        'dcv_gl_enabled': 'DcvGlEnabled',
        'max_concurrent_clients': 'MaxConcurrentClients',
        'init_file_path': 'InitFilePath',
        'init_file': 'InitFile',
        'autorun_file': 'AutorunFile',
        'autorun_file_arguments': 'AutorunFileArguments',
        'permissions_file': 'PermissionsFile',
        'requirements': 'Requirements',
        'enqueue_request': 'EnqueueRequest',
        'disable_retry_on_failure': 'DisableRetryOnFailure',
        'storage_root': 'StorageRoot'
    }

    def __init__(self, name=None, owner=None, type=None, dcv_gl_enabled=None, max_concurrent_clients=None, init_file_path=None, init_file=None, autorun_file=None, autorun_file_arguments=None, permissions_file=None, requirements=None, enqueue_request=None, disable_retry_on_failure=None, storage_root=None):  # noqa: E501
        """CreateSessionRequestData - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._owner = None
        self._type = None
        self._dcv_gl_enabled = None
        self._max_concurrent_clients = None
        self._init_file_path = None
        self._init_file = None
        self._autorun_file = None
        self._autorun_file_arguments = None
        self._permissions_file = None
        self._requirements = None
        self._enqueue_request = None
        self._disable_retry_on_failure = None
        self._storage_root = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if owner is not None:
            self.owner = owner
        if type is not None:
            self.type = type
        if dcv_gl_enabled is not None:
            self.dcv_gl_enabled = dcv_gl_enabled
        if max_concurrent_clients is not None:
            self.max_concurrent_clients = max_concurrent_clients
        if init_file_path is not None:
            self.init_file_path = init_file_path
        if init_file is not None:
            self.init_file = init_file
        if autorun_file is not None:
            self.autorun_file = autorun_file
        if autorun_file_arguments is not None:
            self.autorun_file_arguments = autorun_file_arguments
        if permissions_file is not None:
            self.permissions_file = permissions_file
        if requirements is not None:
            self.requirements = requirements
        if enqueue_request is not None:
            self.enqueue_request = enqueue_request
        if disable_retry_on_failure is not None:
            self.disable_retry_on_failure = disable_retry_on_failure
        if storage_root is not None:
            self.storage_root = storage_root

    @property
    def name(self):
        """Gets the name of this CreateSessionRequestData.  # noqa: E501

        The descriptive name of the session  # noqa: E501

        :return: The name of this CreateSessionRequestData.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateSessionRequestData.

        The descriptive name of the session  # noqa: E501

        :param name: The name of this CreateSessionRequestData.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def owner(self):
        """Gets the owner of this CreateSessionRequestData.  # noqa: E501

        The owner of the session  # noqa: E501

        :return: The owner of this CreateSessionRequestData.  # noqa: E501
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this CreateSessionRequestData.

        The owner of the session  # noqa: E501

        :param owner: The owner of this CreateSessionRequestData.  # noqa: E501
        :type: str
        """

        self._owner = owner

    @property
    def type(self):
        """Gets the type of this CreateSessionRequestData.  # noqa: E501

        The session type (Virtual or Console)  # noqa: E501

        :return: The type of this CreateSessionRequestData.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CreateSessionRequestData.

        The session type (Virtual or Console)  # noqa: E501

        :param type: The type of this CreateSessionRequestData.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def dcv_gl_enabled(self):
        """Gets the dcv_gl_enabled of this CreateSessionRequestData.  # noqa: E501

        The property that specifies if dcv-gl is enabled  # noqa: E501

        :return: The dcv_gl_enabled of this CreateSessionRequestData.  # noqa: E501
        :rtype: bool
        """
        return self._dcv_gl_enabled

    @dcv_gl_enabled.setter
    def dcv_gl_enabled(self, dcv_gl_enabled):
        """Sets the dcv_gl_enabled of this CreateSessionRequestData.

        The property that specifies if dcv-gl is enabled  # noqa: E501

        :param dcv_gl_enabled: The dcv_gl_enabled of this CreateSessionRequestData.  # noqa: E501
        :type: bool
        """

        self._dcv_gl_enabled = dcv_gl_enabled

    @property
    def max_concurrent_clients(self):
        """Gets the max_concurrent_clients of this CreateSessionRequestData.  # noqa: E501

        The number of max concurrent clients that can log to a session  # noqa: E501

        :return: The max_concurrent_clients of this CreateSessionRequestData.  # noqa: E501
        :rtype: int
        """
        return self._max_concurrent_clients

    @max_concurrent_clients.setter
    def max_concurrent_clients(self, max_concurrent_clients):
        """Sets the max_concurrent_clients of this CreateSessionRequestData.

        The number of max concurrent clients that can log to a session  # noqa: E501

        :param max_concurrent_clients: The max_concurrent_clients of this CreateSessionRequestData.  # noqa: E501
        :type: int
        """

        self._max_concurrent_clients = max_concurrent_clients

    @property
    def init_file_path(self):
        """Gets the init_file_path of this CreateSessionRequestData.  # noqa: E501

        The init file path on the DCV host. This field is deprecated and replaced by InitFile  # noqa: E501

        :return: The init_file_path of this CreateSessionRequestData.  # noqa: E501
        :rtype: str
        """
        return self._init_file_path

    @init_file_path.setter
    def init_file_path(self, init_file_path):
        """Sets the init_file_path of this CreateSessionRequestData.

        The init file path on the DCV host. This field is deprecated and replaced by InitFile  # noqa: E501

        :param init_file_path: The init_file_path of this CreateSessionRequestData.  # noqa: E501
        :type: str
        """

        self._init_file_path = init_file_path

    @property
    def init_file(self):
        """Gets the init_file of this CreateSessionRequestData.  # noqa: E501

        File on the DCV host to be used to initialize the session instead of the default. If it is not a simple filename, it must be a relative path to the init directory configured on the DCV host.  # noqa: E501

        :return: The init_file of this CreateSessionRequestData.  # noqa: E501
        :rtype: str
        """
        return self._init_file

    @init_file.setter
    def init_file(self, init_file):
        """Sets the init_file of this CreateSessionRequestData.

        File on the DCV host to be used to initialize the session instead of the default. If it is not a simple filename, it must be a relative path to the init directory configured on the DCV host.  # noqa: E501

        :param init_file: The init_file of this CreateSessionRequestData.  # noqa: E501
        :type: str
        """

        self._init_file = init_file

    @property
    def autorun_file(self):
        """Gets the autorun_file of this CreateSessionRequestData.  # noqa: E501

        File on the DCV host to be automatically executed within the session. If it is not a simple filename, it must be a relative path to the autorun directory configured on the DCV host.  # noqa: E501

        :return: The autorun_file of this CreateSessionRequestData.  # noqa: E501
        :rtype: str
        """
        return self._autorun_file

    @autorun_file.setter
    def autorun_file(self, autorun_file):
        """Sets the autorun_file of this CreateSessionRequestData.

        File on the DCV host to be automatically executed within the session. If it is not a simple filename, it must be a relative path to the autorun directory configured on the DCV host.  # noqa: E501

        :param autorun_file: The autorun_file of this CreateSessionRequestData.  # noqa: E501
        :type: str
        """

        self._autorun_file = autorun_file

    @property
    def autorun_file_arguments(self):
        """Gets the autorun_file_arguments of this CreateSessionRequestData.  # noqa: E501

        Command-line arguments to be passed to the file defined in AutorunFile when it is executed.  # noqa: E501

        :return: The autorun_file_arguments of this CreateSessionRequestData.  # noqa: E501
        :rtype: list[str]
        """
        return self._autorun_file_arguments

    @autorun_file_arguments.setter
    def autorun_file_arguments(self, autorun_file_arguments):
        """Sets the autorun_file_arguments of this CreateSessionRequestData.

        Command-line arguments to be passed to the file defined in AutorunFile when it is executed.  # noqa: E501

        :param autorun_file_arguments: The autorun_file_arguments of this CreateSessionRequestData.  # noqa: E501
        :type: list[str]
        """

        self._autorun_file_arguments = autorun_file_arguments

    @property
    def permissions_file(self):
        """Gets the permissions_file of this CreateSessionRequestData.  # noqa: E501

        The permissions file  # noqa: E501

        :return: The permissions_file of this CreateSessionRequestData.  # noqa: E501
        :rtype: str
        """
        return self._permissions_file

    @permissions_file.setter
    def permissions_file(self, permissions_file):
        """Sets the permissions_file of this CreateSessionRequestData.

        The permissions file  # noqa: E501

        :param permissions_file: The permissions_file of this CreateSessionRequestData.  # noqa: E501
        :type: str
        """

        self._permissions_file = permissions_file

    @property
    def requirements(self):
        """Gets the requirements of this CreateSessionRequestData.  # noqa: E501

        The required tags for the session. Example: ram_gb = '4' and software='my software'. The escape char is ', example irish_name='o''neil'   # noqa: E501

        :return: The requirements of this CreateSessionRequestData.  # noqa: E501
        :rtype: str
        """
        return self._requirements

    @requirements.setter
    def requirements(self, requirements):
        """Sets the requirements of this CreateSessionRequestData.

        The required tags for the session. Example: ram_gb = '4' and software='my software'. The escape char is ', example irish_name='o''neil'   # noqa: E501

        :param requirements: The requirements of this CreateSessionRequestData.  # noqa: E501
        :type: str
        """

        self._requirements = requirements

    @property
    def enqueue_request(self):
        """Gets the enqueue_request of this CreateSessionRequestData.  # noqa: E501

        The request is enqueued if no DCV server are available for placement. If this field is not set, the default is false.  # noqa: E501

        :return: The enqueue_request of this CreateSessionRequestData.  # noqa: E501
        :rtype: bool
        """
        return self._enqueue_request

    @enqueue_request.setter
    def enqueue_request(self, enqueue_request):
        """Sets the enqueue_request of this CreateSessionRequestData.

        The request is enqueued if no DCV server are available for placement. If this field is not set, the default is false.  # noqa: E501

        :param enqueue_request: The enqueue_request of this CreateSessionRequestData.  # noqa: E501
        :type: bool
        """

        self._enqueue_request = enqueue_request

    @property
    def disable_retry_on_failure(self):
        """Gets the disable_retry_on_failure of this CreateSessionRequestData.  # noqa: E501

        Disable automatic retry of the request if session creation fails. If this field is not set, the default is false.  # noqa: E501

        :return: The disable_retry_on_failure of this CreateSessionRequestData.  # noqa: E501
        :rtype: bool
        """
        return self._disable_retry_on_failure

    @disable_retry_on_failure.setter
    def disable_retry_on_failure(self, disable_retry_on_failure):
        """Sets the disable_retry_on_failure of this CreateSessionRequestData.

        Disable automatic retry of the request if session creation fails. If this field is not set, the default is false.  # noqa: E501

        :param disable_retry_on_failure: The disable_retry_on_failure of this CreateSessionRequestData.  # noqa: E501
        :type: bool
        """

        self._disable_retry_on_failure = disable_retry_on_failure

    @property
    def storage_root(self):
        """Gets the storage_root of this CreateSessionRequestData.  # noqa: E501

        Specifies the path to the folder used for session storage.  # noqa: E501

        :return: The storage_root of this CreateSessionRequestData.  # noqa: E501
        :rtype: str
        """
        return self._storage_root

    @storage_root.setter
    def storage_root(self, storage_root):
        """Sets the storage_root of this CreateSessionRequestData.

        Specifies the path to the folder used for session storage.  # noqa: E501

        :param storage_root: The storage_root of this CreateSessionRequestData.  # noqa: E501
        :type: str
        """

        self._storage_root = storage_root

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateSessionRequestData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateSessionRequestData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
