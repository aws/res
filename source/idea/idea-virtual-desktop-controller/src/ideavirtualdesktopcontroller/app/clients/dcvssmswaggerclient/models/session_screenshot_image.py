# coding: utf-8

"""
    DCV Session Manager

    DCV Session Manager API  # noqa: E501

    OpenAPI spec version: 2021.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class SessionScreenshotImage(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'format': 'str',
        'data': 'str',
        'creation_time': 'datetime',
        'primary': 'bool'
    }

    attribute_map = {
        'format': 'Format',
        'data': 'Data',
        'creation_time': 'CreationTime',
        'primary': 'Primary'
    }

    def __init__(self, format=None, data=None, creation_time=None, primary=None):  # noqa: E501
        """SessionScreenshotImage - a model defined in Swagger"""  # noqa: E501
        self._format = None
        self._data = None
        self._creation_time = None
        self._primary = None
        self.discriminator = None
        if format is not None:
            self.format = format
        if data is not None:
            self.data = data
        if creation_time is not None:
            self.creation_time = creation_time
        if primary is not None:
            self.primary = primary

    @property
    def format(self):
        """Gets the format of this SessionScreenshotImage.  # noqa: E501

        The image format. Supported formats: jpeg, png  # noqa: E501

        :return: The format of this SessionScreenshotImage.  # noqa: E501
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this SessionScreenshotImage.

        The image format. Supported formats: jpeg, png  # noqa: E501

        :param format: The format of this SessionScreenshotImage.  # noqa: E501
        :type: str
        """

        self._format = format

    @property
    def data(self):
        """Gets the data of this SessionScreenshotImage.  # noqa: E501

        The base64 image data  # noqa: E501

        :return: The data of this SessionScreenshotImage.  # noqa: E501
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this SessionScreenshotImage.

        The base64 image data  # noqa: E501

        :param data: The data of this SessionScreenshotImage.  # noqa: E501
        :type: str
        """

        self._data = data

    @property
    def creation_time(self):
        """Gets the creation_time of this SessionScreenshotImage.  # noqa: E501

        The session screen creation time  # noqa: E501

        :return: The creation_time of this SessionScreenshotImage.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this SessionScreenshotImage.

        The session screen creation time  # noqa: E501

        :param creation_time: The creation_time of this SessionScreenshotImage.  # noqa: E501
        :type: datetime
        """

        self._creation_time = creation_time

    @property
    def primary(self):
        """Gets the primary of this SessionScreenshotImage.  # noqa: E501

        Tells if the image belongs to the primary screen  # noqa: E501

        :return: The primary of this SessionScreenshotImage.  # noqa: E501
        :rtype: bool
        """
        return self._primary

    @primary.setter
    def primary(self, primary):
        """Sets the primary of this SessionScreenshotImage.

        Tells if the image belongs to the primary screen  # noqa: E501

        :param primary: The primary of this SessionScreenshotImage.  # noqa: E501
        :type: bool
        """

        self._primary = primary

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SessionScreenshotImage, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SessionScreenshotImage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
