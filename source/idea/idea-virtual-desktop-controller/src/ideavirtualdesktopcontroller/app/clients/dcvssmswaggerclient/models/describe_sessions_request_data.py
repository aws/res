# coding: utf-8

"""
    DCV Session Manager

    DCV Session Manager API  # noqa: E501

    OpenAPI spec version: 2021.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class DescribeSessionsRequestData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'session_ids': 'list[str]',
        'filters': 'list[KeyValuePair]',
        'max_results': 'int',
        'next_token': 'str'
    }

    attribute_map = {
        'session_ids': 'SessionIds',
        'filters': 'Filters',
        'max_results': 'MaxResults',
        'next_token': 'NextToken'
    }

    def __init__(self, session_ids=None, filters=None, max_results=None, next_token=None):  # noqa: E501
        """DescribeSessionsRequestData - a model defined in Swagger"""  # noqa: E501
        self._session_ids = None
        self._filters = None
        self._max_results = None
        self._next_token = None
        self.discriminator = None
        if session_ids is not None:
            self.session_ids = session_ids
        if filters is not None:
            self.filters = filters
        if max_results is not None:
            self.max_results = max_results
        if next_token is not None:
            self.next_token = next_token

    @property
    def session_ids(self):
        """Gets the session_ids of this DescribeSessionsRequestData.  # noqa: E501

        The session ids  # noqa: E501

        :return: The session_ids of this DescribeSessionsRequestData.  # noqa: E501
        :rtype: list[str]
        """
        return self._session_ids

    @session_ids.setter
    def session_ids(self, session_ids):
        """Sets the session_ids of this DescribeSessionsRequestData.

        The session ids  # noqa: E501

        :param session_ids: The session_ids of this DescribeSessionsRequestData.  # noqa: E501
        :type: list[str]
        """

        self._session_ids = session_ids

    @property
    def filters(self):
        """Gets the filters of this DescribeSessionsRequestData.  # noqa: E501

        The filters. Filters supported: owner, tag:key. 'owner' The session owner to filter by. 'tag:key' The key/value combination of a tag assigned to the server. Use the tag key in the filter name and the tag value as the filter value. For example, to find all sessions that have a tag with the key City and the value London , specify tag:City for the filter name and London for the filter value.  # noqa: E501

        :return: The filters of this DescribeSessionsRequestData.  # noqa: E501
        :rtype: list[KeyValuePair]
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this DescribeSessionsRequestData.

        The filters. Filters supported: owner, tag:key. 'owner' The session owner to filter by. 'tag:key' The key/value combination of a tag assigned to the server. Use the tag key in the filter name and the tag value as the filter value. For example, to find all sessions that have a tag with the key City and the value London , specify tag:City for the filter name and London for the filter value.  # noqa: E501

        :param filters: The filters of this DescribeSessionsRequestData.  # noqa: E501
        :type: list[KeyValuePair]
        """

        self._filters = filters

    @property
    def max_results(self):
        """Gets the max_results of this DescribeSessionsRequestData.  # noqa: E501

        Number of results to show, if provided must be between 1 and 1000  # noqa: E501

        :return: The max_results of this DescribeSessionsRequestData.  # noqa: E501
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this DescribeSessionsRequestData.

        Number of results to show, if provided must be between 1 and 1000  # noqa: E501

        :param max_results: The max_results of this DescribeSessionsRequestData.  # noqa: E501
        :type: int
        """

        self._max_results = max_results

    @property
    def next_token(self):
        """Gets the next_token of this DescribeSessionsRequestData.  # noqa: E501

        the pagination token  # noqa: E501

        :return: The next_token of this DescribeSessionsRequestData.  # noqa: E501
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this DescribeSessionsRequestData.

        the pagination token  # noqa: E501

        :param next_token: The next_token of this DescribeSessionsRequestData.  # noqa: E501
        :type: str
        """

        self._next_token = next_token

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DescribeSessionsRequestData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DescribeSessionsRequestData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
