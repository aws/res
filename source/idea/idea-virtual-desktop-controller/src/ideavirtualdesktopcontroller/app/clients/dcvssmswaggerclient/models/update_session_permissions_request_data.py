# coding: utf-8

"""
    DCV Session Manager

    DCV Session Manager API  # noqa: E501

    OpenAPI spec version: 2021.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class UpdateSessionPermissionsRequestData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'session_id': 'str',
        'owner': 'str',
        'permissions_file': 'str'
    }

    attribute_map = {
        'session_id': 'SessionId',
        'owner': 'Owner',
        'permissions_file': 'PermissionsFile'
    }

    def __init__(self, session_id=None, owner=None, permissions_file=None):  # noqa: E501
        """UpdateSessionPermissionsRequestData - a model defined in Swagger"""  # noqa: E501
        self._session_id = None
        self._owner = None
        self._permissions_file = None
        self.discriminator = None
        if session_id is not None:
            self.session_id = session_id
        if owner is not None:
            self.owner = owner
        if permissions_file is not None:
            self.permissions_file = permissions_file

    @property
    def session_id(self):
        """Gets the session_id of this UpdateSessionPermissionsRequestData.  # noqa: E501

        The session id  # noqa: E501

        :return: The session_id of this UpdateSessionPermissionsRequestData.  # noqa: E501
        :rtype: str
        """
        return self._session_id

    @session_id.setter
    def session_id(self, session_id):
        """Sets the session_id of this UpdateSessionPermissionsRequestData.

        The session id  # noqa: E501

        :param session_id: The session_id of this UpdateSessionPermissionsRequestData.  # noqa: E501
        :type: str
        """

        self._session_id = session_id

    @property
    def owner(self):
        """Gets the owner of this UpdateSessionPermissionsRequestData.  # noqa: E501

        The owner  # noqa: E501

        :return: The owner of this UpdateSessionPermissionsRequestData.  # noqa: E501
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this UpdateSessionPermissionsRequestData.

        The owner  # noqa: E501

        :param owner: The owner of this UpdateSessionPermissionsRequestData.  # noqa: E501
        :type: str
        """

        self._owner = owner

    @property
    def permissions_file(self):
        """Gets the permissions_file of this UpdateSessionPermissionsRequestData.  # noqa: E501

        The permissions file base64 encoded  # noqa: E501

        :return: The permissions_file of this UpdateSessionPermissionsRequestData.  # noqa: E501
        :rtype: str
        """
        return self._permissions_file

    @permissions_file.setter
    def permissions_file(self, permissions_file):
        """Sets the permissions_file of this UpdateSessionPermissionsRequestData.

        The permissions file base64 encoded  # noqa: E501

        :param permissions_file: The permissions_file of this UpdateSessionPermissionsRequestData.  # noqa: E501
        :type: str
        """

        self._permissions_file = permissions_file

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateSessionPermissionsRequestData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateSessionPermissionsRequestData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
