; Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
; SPDX-License-Identifier: Apache-2.0

[tox]
minversion = 4.0.13
env_list =
    lint
    type
    py39
    tests
    coverage

[testenv:lint]
description = run lint checks
skip_install = true
deps =
    -rrequirements/lint.txt
commands =
    black --check .
    isort --check source
    pytest source/tests/header.py

[testenv:type]
description = run type checks
package = wheel
wheel_build_env = .pkg
extras =
    dev
deps =
    -rrequirements/dev.txt
commands =
    ; TODO: Change the path to include all the source files
    mypy --strict source --exclude "idea-*"

[testenv:bandit]
description = run bandit scan
deps =
    bandit
commands =
    # Fails the scan if high severity issues are encountered. Can be expanded to support failure on medium severity issues.
    bandit -r source --exclude '**/test*' -lll

[testenv:py39]
description = run unit tests
extras =
    dev
set_env =
    LC_CTYPE=en_US.UTF-8
deps =
    -rrequirements/dev.txt
commands =
    pytest -v source/tests/unit/pipeline {posargs} --cov --cov-report=term
    pytest -v source/tests/unit/infrastructure {posargs} --cov --cov-report=term

[testenv:tests.{administrator, cluster-manager, virtual-desktop-controller, sdk, pipeline, infrastructure}]
description = run legacy tests
extras =
    dev
set_env =
    LC_CTYPE=en_US.UTF-8
    PYTHONPATH = {env:PYTHONPATH}{:}{toxinidir}{:}{toxinidir}/source/idea/idea-data-model/src{:}{toxinidir}/source/idea/idea-sdk/src{:}{toxinidir}/source/idea/idea-test-utils/src{:}{toxinidir}/source/idea/idea-cluster-manager/src{:}{toxinidir}/source/tests/unit/idea-cluster-manager
deps =
    -rrequirements/dev.txt
commands =
    pip install source/idea/idea-data-model/src
    tests.administrator: coverage run --parallel-mode -m pytest -v source/tests/unit/idea-administrator {posargs}
    tests.cluster-manager: coverage run --parallel-mode -m pytest -v source/tests/unit/idea-cluster-manager {posargs}
    tests.virtual-desktop-controller: coverage run --parallel-mode -m pytest -v source/tests/unit/idea-virtual-desktop-controller {posargs}
    tests.sdk: coverage run --parallel-mode -m pytest -v source/tests/unit/idea-sdk {posargs}
    tests.pipeline: coverage run --parallel-mode -m pytest -v source/tests/unit/pipeline {posargs}
    tests.infrastructure: coverage run --parallel-mode -m pytest -v source/tests/unit/infrastructure {posargs}

[testenv:coverage]
description = combine and generate code coverage report
allowlist_externals =
    coverage
    cat
    rm
extras =
    dev
set_env =
    LC_CTYPE=en_US.UTF-8
    PYTHONPATH = {env:PYTHONPATH}{:}{toxinidir}{:}{toxinidir}/source/idea/idea-data-model/src{:}{toxinidir}/source/idea/idea-sdk/src{:}{toxinidir}/source/idea/idea-test-utils/src{:}{toxinidir}/source/idea/idea-cluster-manager/src{:}{toxinidir}/source/tests/unit/idea-cluster-manager
deps =
    -rrequirements/dev.txt
commands =
    rm -f .coverage .coverage.*
    coverage run --parallel-mode -m pytest -v source/tests/unit/idea-administrator {posargs}
    coverage run --parallel-mode -m pytest -v source/tests/unit/idea-cluster-manager {posargs}
    coverage run --parallel-mode -m pytest -v source/tests/unit/idea-virtual-desktop-controller {posargs}
    coverage run --parallel-mode -m pytest -v source/tests/unit/idea-sdk {posargs}
    coverage run --parallel-mode -m pytest -v source/tests/unit/pipeline {posargs}
    coverage run --parallel-mode -m pytest -v source/tests/unit/infrastructure {posargs}
    coverage combine
    coverage html -i
    python source/idea/pipeline/scripts/helpers/generate_cov_report.py
    cat summary_report.txt

[testenv:build]
description = build legacy app
skip_install = true
set_env =
    LC_CTYPE=en_US.UTF-8
deps =
    -rrequirements/dev.txt
commands =
    invoke clean
    invoke release.build-opensource-dist
    invoke release.build-s3-dist
    invoke build package
    invoke docker.prepare-artifacts

[testenv:npm_audit]
description = run npm audit
change_dir = source/idea/idea-cluster-manager/webapp
deps =
    nodeenv
commands =
    nodeenv --python-virtualenv
    npm i --package-lock-only --force
    ; TODO: Stop ignoring the npm-audit output
    - npm audit --json --audit-level=moderate

[testenv:viperlight_scan]
description = run viperlight scan
deps = nodeenv
allowlist_externals =
    rm
    bash
    curl
    unzip
commands =
    nodeenv --python-virtualenv
    rm -rf viperlight
    curl "https://s3.amazonaws.com/viperlight-scanner/latest/viperlight.zip" -o "viperlight.zip"
    unzip viperlight.zip -d viperlight
    bash -c "pushd viperlight && npm link && popd"
    viperlight scan -t .

[testenv:integ-tests.{cluster-manager}]
description = run integ tests
skip_install = true
set_env =
    LC_CTYPE=en_US.UTF-8
deps =
    -rrequirements/dev.txt
commands =
    integ-tests.cluster-manager: invoke integ-tests.cluster-manager {posargs}

[testenv:integ-tests.smoke]
description = run smoke tests
skip_install = true
set_env =
    LC_CTYPE=en_US.UTF-8
deps =
    -rrequirements/dev.txt
commands =
    integ-tests.smoke: invoke integ-tests.smoke {posargs}
